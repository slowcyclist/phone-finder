# configure here the behavior of phone-finder
#this is a python file that is parsed at program start. Be carefull with syntax and indentation
# anything after a # is a comment

############################################################
#  additional user-defined sms triggered actions (if needed)
############################################################
# the functions receive two parameters : the sender's phone numer, and the content of the message (even if not used)

def sms_selfie(sender, message):
  return #not yet implemented (sending MMS is not trivial) 


############################################################
#     sms trigger messages
############################################################

# if an SMS (from any sender) *contains* one of the key strings defined below, it will trigger the corresponding action. 
# Key strings are case-sensitive and internal spaces count

# => you may combine several requests (several key strings) in a single SMS, but: 
#    -they will not necessarily be executed in the order you write,
#    -a given action is only executed once
#    -a shell command can only be in last position 

# sms_triggers is a dictionary. Entries are : "key string" : name_of_the_function_that_it_will_trigger , 
sms_triggers={

#gps localization and return by sms
"Dude, where are you?" : sms_localization,

#make phone non-silent
"Crank up the volume!" : sms_unmute ,

#open ssh link to predefined server with remote tunnel (so that we can ssh to the phone from the server)
"You should call mom right now" : sms_setup_ssh_remote, 

#run arbitrary shell command
"You ar under my power! Obey!" : sms_run_command,

#You can define your own actions with the corresponding code given above. For example take selfie 
"You look so nice today" : sms_selfie

} #closing bracket for the sms_triggers dictionary


#now the shell command to run to establish the ssh connexion with key and remote tunnel
#Here we assume everything (key to use, server address, ports to tunnel...) is defined in a section "myserver" of the the ssh config file
 
ssh_with_key_shell_command = "/usr/bin/ssh -Nf -F /home/nemo/.ssh/config myserver"

run_command_separator = "|" #the command that will be executed is everything after the first occurence of this separator string

##############################################################
#    voice calls
###############################################################

#callers that may unmute the phone (numbers with country code, separated by comma):
authorized_callers = ["+336XXXXXXXX" , "+491YYYYYYYY" ,  "+331ZZZZZZZZ"]

#if the phone is silent, warn these callers by sms (empty string = no warning)
warn_silent_sms = "Sorry my phone is silent..."

# if any autorized caller rings the phone caller_repeat times within a duration caller_timewindow,
# the phone ambience is changed to not_silent_ambience (and rings!)
# durations are in seconds
caller_timewindow = 60
caller_repeat = 2

############################################################
# general
############################################################

silent_ambience = "silent"
not_silent_ambience = "origami"

############################################################
# gps 
############################################################
# duration allowed for getting a fix, in seconds
gps_localization_timeout = 120
# requested accuracy, in meters
gps_accuracy_target = 10

############################################################
# email  
############################################################
# use an account you own. It must be able to identify to the smtp server with the password 
# sender

email_sender = "my_email@address"
email_pw = "well_you're_supposed to know_it"

smtp_server = 'smtp.your.provider'
smtp_server_port = 80 #check with your provider

#recipient (can be the same address as sender)
email_dest = "my_other_email@address"


